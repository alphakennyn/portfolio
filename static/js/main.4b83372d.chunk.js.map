{"version":3,"sources":["components/Loader/index.js","components/Home/index.js","components/misc/Card/index.js","components/Projects/index.js","components/Jobs/index.js","components/App.js","serviceWorker.js","index.js"],"names":["props","className","NameComponent","img","name","alt","src","Page","DefaultCard","title","description","link","href","CloudCard","startTime","endTime","cards","projects","map","id","rest","key","jobs","ghme","github","client","user","AnimateApp","useState","pageIndex","setPage","githubInfo","setGitHub","pages","page","component","Home","Projects","Jobs","transitions","useTransition","p","from","opacity","enter","height","leave","position","visibility","useEffect","window","addEventListener","handleScroll","removeEventListener","info","err","body","headers","console","log","avatar_url","html_url","hireable","created_at","login","location","repos_url","url","copyPageIndex","length","i","item","div","style","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b83372d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst LoaderIcon = (props) => {\r\n    return (\r\n       <div className=\"\">\r\n       </div>\r\n    )\r\n} \r\n\r\nexport default (props) => {\r\n return (\r\n    <div className=\"page page_loaders\">\r\n        <div className=\"\">\r\n            {/* <LoaderIcon /> */}\r\n            loading...\r\n        </div>\r\n    </div>\r\n )\r\n} ","import React from 'react';\r\nimport './styles.scss';\r\n\r\nconst NameComponent = ({ img, name }) => {\r\n    return (\r\n        <div className=\"name-container\">\r\n          <img alt=\"Kenny Nguyen profile\" src={img} />\r\n          <h2>{name}</h2>\r\n        </div>\r\n      );\r\n}\r\n\r\n\r\nconst Page = (props) => {\r\n  return (\r\n    <div className=\"page intro\">\r\n        <NameComponent {...props}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Page;\r\n","import React from 'react';\r\n\r\nimport './styles.scss';\r\n\r\n\r\n/**\r\n * @description project cards\r\n * @param {*} props\r\n */\r\nexport const DefaultCard = ({ title, description, link, className = '' }) => {\r\n    return (\r\n        <div className={`card_container ${className}`}>\r\n          <div className=\"card_header\">\r\n            <h2 className=\"card_title\">{title}</h2>\r\n          </div>\r\n          <div className=\"card_body\">\r\n            <div className=\"card_description\">{description}</div>\r\n          </div>\r\n          <div className=\"card_footer\">\r\n            <a className=\"card_link\" href={link}>Play now</a>\r\n          </div>\r\n        </div>\r\n      );\r\n}\r\n\r\nexport const CloudCard = ({ title, description, link, startTime, endTime }) => {\r\n    return (\r\n        <div className=\"card_container cloud_card\">\r\n          <div className=\"card_header\">\r\n            <h2 className=\"card_title\">{title}</h2>\r\n            <div className=\"card_header__rightside\">\r\n                <p>{startTime}</p> - \r\n                <p>{endTime}</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"card_body\">\r\n            <div className=\"card_description\">{description}</div>\r\n          </div>\r\n          <div className=\"card_footer\">\r\n          </div>\r\n        </div>\r\n      );\r\n}\r\n","import React from 'react';\r\nimport { DefaultCard } from '../misc/Card';\r\n\r\nimport projects from '../../data/projects.json';\r\n\r\nimport './styles.scss';\r\n\r\n\r\nconst Page = (props) => {\r\n  const cards = projects.map(({ id, ...rest }) => <DefaultCard {...rest} key={id}/>)\r\n  return (\r\n    <div className=\"page page_projects\">\r\n      {cards}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Page;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { CloudCard } from '../misc/Card';\r\n\r\nimport jobs from '../../data/jobs.json';\r\n\r\nimport './styles.scss';\r\n\r\nexport default (props) => {\r\n    const cards = jobs.map(({ id, ...rest }) => <CloudCard {...rest} key={id}/>)\r\n\r\n    return (\r\n        <div className=\"page page_jobs\">\r\n          {cards}\r\n        </div>\r\n      );\r\n}","import React, { useState, useRef, useEffect } from 'react';\r\nimport { useTransition, animated } from 'react-spring'\r\nimport github from 'octonode';\r\n\r\n\r\n// components\r\nimport LoadPage from './Loader';\r\nimport HomePage from './Home';\r\nimport ProjectsPage from './Projects';\r\nimport JobsPage from './Jobs';\r\n\r\nimport './App.scss';\r\n\r\nconst client = github.client();\r\nconst ghme = client.user('alphakennyn');\r\n\r\nconst AnimateApp = (props) => {\r\n  const [pageIndex, setPage] = useState(0);\r\n  const [githubInfo, setGitHub] = useState({});\r\n\r\n  const pages = [\r\n    {\r\n      page: 'loading',\r\n      component: <LoadPage />,\r\n    },\r\n    {\r\n      page: 'home',\r\n      component: <HomePage { ...githubInfo }/>,\r\n    },\r\n    {\r\n      page: 'projects',\r\n      component: <ProjectsPage />,\r\n    },\r\n    {\r\n      page: 'jobs',\r\n      component: <JobsPage />,\r\n    }\r\n  ];\r\n  \r\n  const transitions = useTransition(pageIndex, p => p, {\r\n    from: { opacity: 0 },\r\n    enter: { opacity: 1, height: '100%' },\r\n    leave: { opacity: 0, position: 'absolute', visibility: 'hidden' },\r\n  });\r\n\r\n  useEffect(() => {\r\n    // window.addEventListener('click', throttle(handleScroll, 1000));\r\n    window.addEventListener('click', handleScroll);\r\n    return () => {\r\n      // window.removeEventListener('click', throttle(handleScroll, 1000));\r\n      window.removeEventListener('click', handleScroll);\r\n    }\r\n  });\r\n  useEffect(() => {\r\n    // window.addEventListener('click', throttle(handleScroll, 1000));\r\n    ghme.info((err, body, headers) => {\r\n      if (err) {\r\n        return;\r\n      }\r\n      console.log(body);\r\n      const {\r\n        avatar_url,\r\n        html_url,\r\n        hireable,\r\n        created_at,\r\n        name,\r\n        login,\r\n        location,\r\n        repos_url,\r\n      } = body;\r\n      setGitHub({\r\n        img: avatar_url,\r\n        url: html_url,\r\n        hireable: !!hireable,\r\n        created_at,\r\n        name,\r\n        login,\r\n        location,\r\n      });    \r\n    });\r\n  }, []);\r\n\r\n\r\n  const handleScroll = () => {\r\n    // e.preventDefault();\r\n\r\n    // const element = e.target\r\n\r\n    // if (element.scrollHeight - element.scrollTop === element.clientHeight) {\r\n    //   // do something at end of scroll\r\n    //   console.log('scrolling')\r\n    // }\r\n    // setLock(false);\r\n    let copyPageIndex = pageIndex\r\n    console.log('pageIndex => ', pageIndex);\r\n    console.log('pages.length => ', pages.length);\r\n    const i = pageIndex >= pages.length - 1 ? 0 : ++copyPageIndex;\r\n    setPage(i);\r\n    // setTimeout(() => {\r\n    //   setLock(true);\r\n    // }, 500)\r\n  }\r\n\r\n  return (\r\n    // <div className=\"Kenny-Nguyen\" onWheel={(e) => throttle(handleScroll(e), 1000, { trailing: true, leading: true })}>\r\n    <div className=\"Kenny-Nguyen\">\r\n      {\r\n        transitions.map(({ item, props }) => {\r\n          const { component } = pages[item];\r\n          return <animated.div style={{ ...props }}>{component}</animated.div>;\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AnimateApp;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}